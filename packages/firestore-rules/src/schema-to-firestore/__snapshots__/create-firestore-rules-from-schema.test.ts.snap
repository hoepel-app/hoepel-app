// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createFirestoreRulesFromSchema create Firestore rules from schema 1`] = `
"service cloud.firestore {

  /// Extra rules provided for generation

  

  /// Automaticaly generated Firestore rules

  // Generated permissions for collection 'age-groups' (collection contains docs with doc.id == tenant name)
  match /databases/{database}/documents/age-groups/{document} {
    function hasPermission(permission, tenant) {
      return permission in get(/databases/$(database)/documents/users/$(request.auth.uid)/tenants/$(tenant)).data.permissions;
    }
    allow create: if hasPermission('age-groups:write', document);
    allow read  : if !exists(/databases/$(database)/documents/age-groups/$(document)) || hasPermission('age-groups:read', document);
    allow update: if hasPermission('age-groups:write', document);
    allow delete: if false;
  }
  
  // Generated permissions for collection 'children' (collection contains docs with doc.tenant == tenant name)
  match /databases/{database}/documents/children/{document} {
    function hasPermission(permission, tenant) {
      return permission in get(/databases/$(database)/documents/users/$(request.auth.uid)/tenants/$(tenant)).data.permissions;
    }
    allow create: if hasPermission('child:write', request.resource.data.tenant);
    allow read  : if hasPermission('child:read', resource.data.tenant);
    allow update: if hasPermission('child:write', resource.data.tenant);
    allow delete: if hasPermission('child:write', resource.data.tenant);
  }
  
  // Generated permissions for collection 'consumables' (collection contains docs with doc.id == tenant name)
  match /databases/{database}/documents/consumables/{document} {
    function hasPermission(permission, tenant) {
      return permission in get(/databases/$(database)/documents/users/$(request.auth.uid)/tenants/$(tenant)).data.permissions;
    }
    allow create: if hasPermission('consumables:write', document);
    allow read  : if !exists(/databases/$(database)/documents/consumables/$(document)) || hasPermission('consumables:read', document);
    allow update: if hasPermission('consumables:write', document);
    allow delete: if false;
  }
  
  // Generated permissions for collection 'consumptions' (collection contains docs with doc.tenant == tenant name)
  match /databases/{database}/documents/consumptions/{document} {
    function hasPermission(permission, tenant) {
      return permission in get(/databases/$(database)/documents/users/$(request.auth.uid)/tenants/$(tenant)).data.permissions;
    }
    allow create: if hasPermission('consumption:write', request.resource.data.tenant);
    allow read  : if hasPermission('consumption:read', resource.data.tenant);
    allow update: if hasPermission('consumption:write', resource.data.tenant);
    allow delete: if hasPermission('consumption:write', resource.data.tenant);
  }
  
  // Generated permissions for collection 'users' (collection contains docs with doc.id == user id)
  match /databases/{database}/documents/users/{uid} {
    allow create: if false;
    allow read  : if uid == request.auth.uid;
    allow update: if false;
    allow delete: if false;
  }
  
  // Generated permissions for collection 'users' (collection contains docs with doc.id == user id)
  match /databases/{database}/documents/users/{uid}/{document=**} {
    allow create: if false;
    allow read  : if uid == request.auth.uid;
    allow update: if false;
    allow delete: if false;
  }
  
  // Generated permissions for collection 'users' (collection contains docs with doc.id == user id) - Admin access
  match /databases/{database}/documents/users/{document=**} {
    allow create: if false;
    allow read  : if request.auth.token.isAdmin;
    allow update: if request.auth.token.isAdmin;
    allow delete: if false;
  }

}"
`;
